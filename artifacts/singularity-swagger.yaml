openapi: "3.0.0"
info:
  description: "Singularity is a simple implementation of the SEMAT Essence Kernel"
  version: "1.0.0"
  title: "Singularity"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: "alpha"
  description: "SEMAT Alphas"
  externalDocs:
    description: "SEMAT"
    url: "http://semat.org/what-is-it-and-why-should-you-care-"
- name: "state"
  description: "SEMAT Alpha State"
- name: "card"
  description: "SEMAT ALPHA State Card which needs to be completed"
  externalDocs:
    description: "SEMAT"
    url: "http://semat.org/what-is-it-and-why-should-you-care-"
- name: "system"
  description: "Software system"
  externalDocs:
    description: "The SEMAT Software system"
    url: "http://semat.org/what-is-it-and-why-should-you-care-"  
- name: "team-member"
  description: "Team member of a software system"
  externalDocs:
    description: "A Team member for a Software System, fullfills a SEMAT Competency"
    url: "http://semat.org/what-is-it-and-why-should-you-care-"  
- name: "competency"
  description: "SEMAT Competency"
  externalDocs:
    description: "Team member for a specific software system"
    url: "http://semat.org/what-is-it-and-why-should-you-care-"    

security:
  - ApiKeyAuth: []
  - OAuth2:
      - read
      - write
      - admin
  - BearerAuth: []

paths:
  /systems:

    post:
      summary: "Create System"
      tags:
        - "system"
      description: "Creates a new Software System"
      operationId: "createSystem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/System"
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "409":
          description: "System already exists"             
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "201":
          description: "OK"
          headers:
            Location:
              schema:
                description: "URN of newly created System"
                type: "string"
                format: "uri"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
    get:
      summary: "Get Systems"
      description: "Gets a list of All Systems"
      tags:
        - "system"
      operationId: "getSystems"
      parameters:
        - in: "query"
          name: "owner"
          required: false
          schema:
            type: "string"
        - in: "query"
          name: "name"
          required: false
          schema:
            type: "string"
        - in: "query"
          name: "risk"
          required: false
          schema:
            type: "string"
        - in: "query"
          name: "page"
          schema:
            type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "409":
          description: "System already exists"             
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
          
        

  /systems/{id}:
    put:
      tags:
        - "system"
      summary: "Update System"
      description: "Updates an existing System"
      operationId: "updateSystem"
      parameters:
        - name: "id"
          in: path
          description: "System object that needs to be updated"
          required: true
          schema:
            type: string

      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          $ref: "#/components/schemas/System"
          
      

    get:
      tags:
        - "system"
      summary: "Get System"
      description: "Retrieves a single instance of a system"
      operationId: "getSystem"
      parameters:
        - name: "id"
          in: path
          description: "System object that needs to be retrieved"
          required: true
          schema:
            type: string
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          $ref: "#/components/schemas/System"          
          
  /systems/{id}/team:

    post:
      tags:
      - "system"
      summary: "Update Team"
      description: "Updates a System's Team Members"
      operationId: "updateSystemTeamMembers"
      parameters:
        - name: "id"
          in: path
          description: "System object that needs to be updated"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/TeamMember"                 
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "404":
          description: "System Not Found"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          $ref: "#/components/schemas/System"
          

  /systems/{id}/alphas/{alphaId}/states/{stateId}/card/activation:
    post:
      tags:
      - "card"
      summary: "Deactivate Checklist Items"
      description: "A set of Checklist items to deactive for an Alpha state"
      operationId: "post"
      parameters:
        - name: "id"
          in: path
          description: "System object that needs to be updated"
          required: true
          schema:
            type: string
        - name: "alphaId"
          in: path
          description: "Alpha Id"
          required: true
          schema:
            type: string     
        - name: "stateId"
          in: path
          description: "State ID to post a checklist to"
          required: true
          schema:
            type: string                
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/CheckListItemActivation"                
                
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "404":
          description: "System Not Found"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          description: "List of deactivation for the current checklist"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CheckListItemActivation"

  /systems/{id}/alphas/{alphaId}/states/{stateId}/card:
    put:
      tags:
      - "checklist"
      summary: "Update Checklist"
      description: "Updates the specific checklist item"
      operationId: "updateAlphaStateChecklist"
      parameters:
        - name: "id"
          in: path
          description: "System object that needs to be updated"
          required: true
          schema:
            type: string
        - name: "alphaId"
          in: path
          description: "Alpha Id"
          required: true
          schema:
            type: string     
        - name: "stateId"
          in: path
          description: "State ID to post a checklist to"
          required: true
          schema:
            type: string                
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/CheckListItem"                 
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "404":
          description: "System Not Found"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          $ref: "#/components/schemas/System"
          
          
  /systems/{id}/alphas/{alphaId}/states/{stateId}:
    get:
      tags:
      - "state"
      summary: "Get a System's Alpha state by it's Id"
      description: "Get a System's Alpha state by it's Id"
      operationId: "getSystemAlphaState"
      parameters:
        - name: "id"
          in: path
          description: "System Id"
          required: true
          schema:
            type: string
        - name: "alphaId"
          in: path
          description: "Alpha Id"
          required: true
          schema:
            type: string     
        - name: "stateId"
          in: path
          description: "State ID"
          required: true
          schema:
            type: string 
      responses:
        "401":
          description: "Unauthorized"
        "403":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        "400":
          $ref: "#/components/schemas/ApiResponse"
        "500":
          $ref: "#/components/schemas/ApiResponse"
        "200":
          $ref: "#/components/schemas/State"              

    
components:
  
  securitySchemes:
    OAuth2:
      type: "oauth2"
      flows:
        authorizationCode:
          authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
          tokenUrl: ""
          scopes:
            read: Grants Read Access
            write: Gants Write Access
            admin: Grants Admin Access
    BearerAuth:
      type: "http"
      scheme: "bearer"

    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:


    Competency:
      type: "string"
      enum:
        - StakeHolderRepresentation
        - Analysis
        - Development
        - Testing
        - Leadership
        - Management
        
      
      
  
    TeamMember:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Team member id"
          readOnly: true
        email:
          type: "string"
          format: "email"
          description: "Email address of the Team member"
        number:
          type: "string"
        organisation:
          type: "string"
          description: "Organisation to which this Team member belongs"
        competency:
          type: "array"
          description: "The Competency this Team member satisfies"
          items:
            $ref: "#/components/schemas/Competency"
            
    Comment:
      type: "object"
      required:
        - "comment"
      properties:
        dateTime:
          type: "string"
          format: "datetime"
          description: "Datetime when the comment was created"
          readOnly: true
        comment:
          type: "string"
          description: "Comment content"
      format: "datetime"
      
    
    Area:
      type: "string"
      enum:
        - Customer
        - Solution
        - Endeavour
      
   
    System:
      type: "object"
      required:
        - "name"
        - "blurb"
        - "owner"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
          description: "Name of the software system"
        blurb:
          type: "string"
          description: "Textual overview of the software system"
        owner:
          description: "Organisation owning the Software System"
          type: "string"
        risk:
          type: "integer"
          format: "int32"
          readOnly: true
        team:
          type: "array"
          items:
            $ref: "#/components/schemas/TeamMember"
        alphas:
          type: "array"
          readOnly: true
          items:
            $ref: "#/components/schemas/Alpha"
            
    AuditTrail:
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        actionedBy:
          type: "string"
          description: "ID of the person who made the change"
          readOnly: true          
        dateTime:
          type: "string"
          format: "date-time"
          description: "The Date time this change was made"
          readOnly: true          
        reason:
          type: "string"
          description: "Text reason for why this change was made"
          readOnly: true
        changes:
          type: array
          readOnly: true
          description: "Mnemonic code which describes what was changed"
          items:
            type: string
          
            
    CheckListItem:
      type: "object"
      required:
        - "body"
      properties:
        id:
          type: "string"
        body:
          type: "string"
          description: "The body or text which defines the question"
        ref:
          type: "string"
          description: "Reference to the SEMAT State definition for a specific State if applicable"
          readOnly: true
        answer:
          type: boolean
          default: false
          description: "Current answer to this checklist item"
        enabled:
          type: boolean
          default: true
          readOnly: true
          description: "Whether this Item is currently enabled to count toward a State completion"
        history:
          type: array
          readOnly: true
          description: "History of this item change"
          items:
            $ref: "#/components/schemas/AuditTrail"
        comments:
          type: "array"
          items:
            $ref: "#/components/schemas/Comment"
            
    CheckListItemActivation:
      type: "object"
      required:
        - "reason"
        - "id"
        - "state"
      properties:
        id:
          type: "string"
          description: "id of the checklist item you want to de-activate"
        reason:
          type: "string"
          description: "Reason for deactivating the Checklist Item"
        state:
          type: "boolean"
          description: "Flag to indicate what the status should be"

            
    State:
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        ref:
          type: "string"
          description: "Reference to the SEMAT State definition for a specific Alpha State"
          readOnly: true
        name:
          type: "string"
          description: "Name of this State definition"
        sequence:
          type: "number"
          format: "uint"
          description: "Sequence which describes the order of this state within the Alpha"
          readOnly: true
        card:
          type: "array"
          readOnly: true
          description: "Items which need to be completed for the Checklist Card"
          items:
            $ref: "#/components/schemas/CheckListItem"
        comments:
          type: "array"
          items:
            $ref: "#/components/schemas/Comment"            

    Alpha:
      type: "object"
      properties:
        area:
          $ref: "#/components/schemas/Area"
        id:
          type: "string"
          readOnly: true
        ref:
          type: "string"
          description: "Reference to the SEMAT Alpha definition"
          readOnly: true
        currentState:
          type: "string"
          description: "reference to the current State which this Alpha is in"
          readOnly: true
        dateEstablished:
          type: "string"
          format: "date-time"
          readOnly: true
          description: "Date at which this State was achieved"
        states:
          type: "array"
          items:
            $ref: "#/components/schemas/State"
  
    Error:
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
    
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "string"
          description: "Code returned by the API response"
        errors:
          type: "array"
          description: "List of errors returned by this response"
          items:
            $ref: "#/components/schemas/Error"
    
    ResultSet:
      type: "array"
      items:
        oneOf:
          - $ref: "#/components/schemas/AtomLink"
          - $ref: "#/components/schemas/System"
          - $ref: "#/components/schemas/Alpha"
          - $ref: "#/components/schemas/Competency"
          - $ref: "#/components/schemas/TeamMember"
          - $ref: "#/components/schemas/State"

    AtomLink:
      type: "object"
      properties:
        type:
          type: "string"
        link:
          type: "string"
          format: "uri"
        rel:
          type: "string"
        
            
    Page:
      type: "object"
      properties:
        page:
          type: "integer"
        result:
          type: "array"
          items:
            $ref: "#/components/schemas/ResultSet"
        links:
          type: "array"
          items:
            $ref: "#/components/schemas/Link"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"